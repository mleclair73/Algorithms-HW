#include <iostream>
#include <limits.h>
#include "d_matrix.h"
#include "d_except.h"
#include <list>
#include <fstream>
#include <stdlib.h>

using namespace std;

typedef int ValueType; // The type of the value in a cell

const int Blank = -1;  // Indicates that a cell is blank

const int SquareSize = 3;  //  The number of cells in a small square
                           //  (usually 3).  The board has
                           //  SquareSize^2 rows and SquareSize^2
                           //  columns.

const int BoardSize = SquareSize * SquareSize;

const int MinValue = 1;
const int MaxValue = 9;

int numSolutions= 0;


ostream &operator<<(ostream &ostr, matrix<bool> &m)
{
    for(int i = 1; i < m.rows(); i++)
    {
        cout << i << " | ";
        for(int j = 1; j < m.cols(); j++)
            cout << m[i][j] << " ";
        cout << endl;
    }
    cout << endl;
}


class board
// Stores the entire Sudoku board
{
    public:
        board(int);
        void clear();
        void initialize(ifstream &fin);
        void print();
        bool isBlank(int, int);
        void setCell(int, int, int);
        ValueType getCell(int, int);
        bool isSolved();
        void updateConflicts(int, int, int);
        void clearCell(int, int);
        void printConflicts();
        void updateRowConflicts(int);
        void updateCellConflicts(int);
        void updateColConflicts(int);

    private:

        // The following matrices go from 1 to BoardSize in each
        // dimension, i.e., they are each (BoardSize+1) * (BoardSize+1)
        matrix<bool> rowConflicts;
        matrix<bool> colConflicts;
        matrix<bool> cellConflicts;

        matrix<ValueType> value;
};


board::board(int sqSize):value(BoardSize+1,BoardSize+1)
// Board constructor
{
    int numVals = MaxValue - MinValue + 1;
    //all conflict mats are 9x9
    rowConflicts.resize(BoardSize + 1, numVals + 1);
    colConflicts.resize(BoardSize + 1, numVals + 1);
    cellConflicts.resize(BoardSize + 1, numVals + 1);
    //board size is 10x10
    clear();
}

void board::clear()
// Mark all possible values as legal for each board entry
{
    for (int i = 1; i <= BoardSize; i++)
        for (int j = 1; j <= BoardSize; j++)
        {
            value[i][j] = Blank;
        }

    for(int i = 1; i < rowConflicts.rows(); i++)
        for(int j = 1; j < rowConflicts.cols(); j++)
        {
            rowConflicts[i][j] = false;
            colConflicts[i][j] = false;
            cellConflicts[i][j] = false;
        }
}

void board::initialize(ifstream &fin)
// Read a Sudoku board from the input file.
{
    char ch;

    clear();

    for (int i = 1; i <= BoardSize; i++)
        for (int j = 1; j <= BoardSize; j++)
        {
            fin >> ch;

            // If the read char is not Blank
            if (ch != '.')
                setCell(i,j,ch-'0');   // Convert char to int
        }
    // cout << rowConflicts;
    // cout << colConflicts;
    // cout << cellConflicts;

}


int squareNumber(int i, int j)
// Return the square number of cell i,j (counting from left to right,
// top to bottom.  Note that i and j each go from 1 to BoardSize
{
    // Note that (int) i/SquareSize and (int) j/SquareSize are the x-y
    // coordinates of the square that i,j is in.

    return SquareSize * ((i-1)/SquareSize) + (j-1)/SquareSize + 1;
}

ostream &operator<<(ostream &ostr, vector<int> &v)
// Overloaded output operator for vector class.
{
    for (int i = 0; i < v.size(); i++)
        ostr << v[i] << " ";
    ostr << endl;
    return ostr;
}

ValueType board::getCell(int i, int j)
// Returns the value stored in a cell.  Throws an exception
// if bad values are passed.
{
    if (i >= 1 && i <= BoardSize && j >= 1 && j <= BoardSize)
        return value[i][j];
    else
        throw rangeError("bad value in getCell");
}

bool board::isBlank(int i, int j)
// Returns true if cell i,j is blank, and false otherwise.
{
    if (i < 1 || i > BoardSize || j < 1 || j > BoardSize)
        throw rangeError("bad value in setCell");

    return (getCell(i,j) == Blank);
}

void board::print()
// Prints the current board.
{
    for (int i = 1; i <= BoardSize; i++)
    {
        if ((i-1) % SquareSize == 0)
        {
            cout << " -";
            for (int j = 1; j <= BoardSize; j++)
                cout << "---";
            cout << "-";
            cout << endl;
        }
    for (int j = 1; j <= BoardSize; j++)
    {
        if ((j-1) % SquareSize == 0)
            cout << "|";
        if (!isBlank(i,j))
            cout << " " << getCell(i,j) << " ";
        else
            cout << "   ";
        }
        cout << "|";
        cout << endl;
    }

    cout << " -";
    for (int j = 1; j <= BoardSize; j++)
        cout << "---";
    cout << "-";
    cout << endl;
}

void board::clearCell(int i, int j)
{

    int curVal = getCell(i, j);
    int sq = squareNumber(i, j);
    if(curVal != Blank)
    {
        cellConflicts[sq][curVal] = false;
        rowConflicts[i][curVal] = false;
        colConflicts[j][curVal] = false;
    }
    setCell(i , j, -1);
}

void board::setCell(int i, int j, int val)
{
    value[i][j] = val;
    updateConflicts(i, j, val);

}//still a work in progress

void board::printConflicts()
{
    cout << "Row Conflicts:" << endl << "  | ";

    for(int i = 1; i < rowConflicts.rows(); i++)
        cout << i << " ";
    cout << endl << "----------------------" << endl;

    cout << rowConflicts;
    cout << "Col Conflicts:" << endl << "  | ";
    for(int i = 1; i < rowConflicts.rows(); i++)
        cout << i << " ";
    cout << endl  << "----------------------" << endl;
    cout << colConflicts;
    cout << "Cell Conflicts:" << endl << "  | ";
    for(int i = 1; i < rowConflicts.rows(); i++)
        cout << i << " ";
    cout << endl << "----------------------" << endl;
    cout << cellConflicts;
}

void board::updateConflicts(int row, int col, int val)
{
    // cout << "Setting" << row << " , " << col << " val: " << val << endl;
    // cout<< "The cel is " << squareNumber(row, col) << endl;
    int cell = squareNumber(row, col);
    int curVal = getCell(row, col);
    if(val != Blank)
    {
        cellConflicts[cell][val] = true;
        rowConflicts[row][val] = true;
        colConflicts[col][val] = true;
    }
    else
    {
        updateRowConflicts(row);
        updateColConflicts(col);
        updateCellConflicts(squareNumber(row,col));
        // cout << "a" << endl;
        // cout << rowConflicts[row][3] << endl;
        // cout << colConflicts[row][3] << endl;
        // cout << cellConflicts[row][3] << endl;

    }
}

void board::updateRowConflicts(int row)
{
    for(int i = 0; i < value.rows(); i++)
        if( value[row][i] != -1)
        {
            rowConflicts[row][value[row][i]] = true;
        }
}

void board::updateColConflicts(int col)
{
    for(int i = 0; i < value.cols(); i++)
        if(value[i][col] != -1)
        {
            colConflicts[col][value[i][col]] = true;
        }
}

void board::updateCellConflicts(int cell)
{
    int ox;
    int oy;
    int val;
    switch(cell)
    {
        case 1: ox = 1;
                oy = 1;
                break;
        case 4: ox = 4;
                oy = 1;
                break;
        case 7: ox = 7;
                oy = 1;
                break;
        case 2: ox = 1;
                oy = 4;
                break;
        case 5: ox = 4;
                oy = 4;
                break;
        case 8: ox = 7;
                oy = 4;
                break;
        case 3: ox = 1;
                oy = 7;
                break;
        case 6: ox = 4;
                oy = 7;
                break;
        case 9: ox = 7;
                oy = 7;
                break;
    }
    for(int y = 0; y <SquareSize; y++)
        for(int x = 0; x < SquareSize; x++)
            {
                val = getCell(ox+x, oy+y);
                if(val != Blank)
                    cellConflicts[cell][val] = true;
            }
}


bool board::isSolved()
{
    for(int i = 1; i <= BoardSize; i++)
    {
        for(int j = 1; j <=BoardSize; j++)
        {
            if(getCell(i,j) == Blank)
                return false;
        }
    }
    return true;
}

int main()
{
    ifstream fin;

    // Read the sample grid from the file.
    string fileName = "sudoku1.txt";

    fin.open(fileName.c_str());
    if (!fin)
    {
        cerr << "Cannot open " << fileName << endl;
        exit(1);
    }

    try
    {
        board b1(SquareSize);

        while (fin && fin.peek() != 'Z')
        {
            b1.initialize(fin);
            b1.print();
            b1.printConflicts();
            cout << "Is the board solved? 0 for False, 1 for True: " << b1.isSolved() << endl;
            b1.clearCell(1,1);
            cout << "Cell 1,1 cleared" << endl;
            b1.printConflicts();
            b1.print();
            b1.clearCell(3,1);
            b1.print();
            b1.printConflicts();
        }
    }
    catch  (indexRangeError &ex)
    {
        cout << ex.what() << endl;
        exit(1);
    }
}
